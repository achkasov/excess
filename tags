!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/boot/home/src/xs/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
./bin/xs	Makefile	/^.\/bin\/xs: .\/src\/main.c$/;"	t
CFG_PROMPT	src/cfg.h	/^const char* CFG_PROMPT = ":";$/;"	v	typeref:typename:const char *
Cell	src/table.h	/^typedef Node Cell;    \/\/ A cell is just a node that holds text data (i.e. Cell = Node)$/;"	t	typeref:typename:Node
Column	src/table.h	/^typedef Node Column;  \/\/ Column is a linked list of Cells (i.e. Column = LinkedList<Cell>)$/;"	t	typeref:typename:Node
MODE_CMD	src/main.c	/^    MODE_CMD,$/;"	e	enum:Mode	file:
MODE_INSERT	src/main.c	/^    MODE_INSERT$/;"	e	enum:Mode	file:
Mode	src/main.c	/^enum Mode {$/;"	g	file:
Node	src/llist.h	/^typedef struct Node {$/;"	s
Node	src/llist.h	/^} Node;$/;"	t	typeref:struct:Node
SHEREDOM_UTF8_H_INCLUDED	vendor/utf8.h	/^#define SHEREDOM_UTF8_H_INCLUDED$/;"	d
State	src/main.c	/^struct State {$/;"	s	file:
Table	src/table.h	/^typedef Node Table;   \/\/ Table is a linked list of Columns (i.e. Table = LinkedList<Column>)$/;"	t	typeref:typename:Node
UTF8_ATTRIBUTE	vendor/utf8.h	/^#define UTF8_ATTRIBUTE(/;"	d
all	Makefile	/^all: .\/bin\/xs$/;"	t
clean	Makefile	/^clean: $/;"	t
cur_col	src/main.c	/^    uint cur_col;$/;"	m	struct:State	typeref:typename:uint	file:
cur_row	src/main.c	/^    uint cur_row;$/;"	m	struct:State	typeref:typename:uint	file:
data	src/llist.h	/^    void* data;$/;"	m	struct:Node	typeref:typename:void *
main	src/main.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mode	src/main.c	/^    enum Mode mode;$/;"	m	struct:State	typeref:enum:Mode	file:
modified	src/main.c	/^    bool modified;$/;"	m	struct:State	typeref:typename:bool	file:
next	src/llist.h	/^    struct Node* next;$/;"	m	struct:Node	typeref:struct:Node *
node_new	src/llist.h	/^Node* node_new(void* data) {$/;"	f	typeref:typename:Node *
node_new_empty	src/llist.h	/^Node* node_new_empty(void) {$/;"	f	typeref:typename:Node *
read_input	src/main.c	/^int read_input(char *buf) {$/;"	f	typeref:typename:int
table	src/main.c	/^    Table *table;$/;"	m	struct:State	typeref:typename:Table *	file:
table_col_ins	src/table.h	/^Table* table_col_ins(Table* tbl, uint idx) {$/;"	f	typeref:typename:Table *
table_col_rem	src/table.h	/^Table* table_col_rem(Table* tbl, uint idx) {$/;"	f	typeref:typename:Table *
table_new_empty	src/table.h	/^Table* table_new_empty() {$/;"	f	typeref:typename:Table *
table_row_ins	src/table.h	/^Table* table_row_ins(Table* tbl, uint idx) {$/;"	f	typeref:typename:Table *
table_row_rem	src/table.h	/^Table* table_row_rem(Table* tbl, uint idx) {$/;"	f	typeref:typename:Table *
utf8_constexpr14	vendor/utf8.h	/^#define utf8_constexpr14 /;"	d
utf8_constexpr14_impl	vendor/utf8.h	/^#define utf8_constexpr14_impl /;"	d
utf8_cplusplus	vendor/utf8.h	/^#define utf8_cplusplus /;"	d
utf8_int32_t	vendor/utf8.h	/^typedef __int32 utf8_int32_t;$/;"	t	typeref:typename:__int32
utf8_int32_t	vendor/utf8.h	/^typedef int32_t utf8_int32_t;$/;"	t	typeref:typename:int32_t
utf8_int8_t	vendor/utf8.h	/^using utf8_int8_t = char8_t; \/* Introduced in C++20 *\/$/;"	t	typeref:typename:char8_t
utf8_nonnull	vendor/utf8.h	/^#define utf8_nonnull$/;"	d
utf8_null	vendor/utf8.h	/^#define utf8_null /;"	d
utf8_pure	vendor/utf8.h	/^#define utf8_pure$/;"	d
utf8_restrict	vendor/utf8.h	/^#define utf8_restrict /;"	d
utf8_weak	vendor/utf8.h	/^#define utf8_weak /;"	d
utf8casecmp	vendor/utf8.h	/^utf8_constexpr14_impl int utf8casecmp(const utf8_int8_t *src1,$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8casestr	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8casestr(const utf8_int8_t *haystack,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8cat	vendor/utf8.h	/^utf8_int8_t *utf8cat(utf8_int8_t *utf8_restrict dst,$/;"	f	typeref:typename:utf8_int8_t *
utf8catcodepoint	vendor/utf8.h	/^utf8_int8_t *utf8catcodepoint(utf8_int8_t *str, utf8_int32_t chr, size_t n) {$/;"	f	typeref:typename:utf8_int8_t *
utf8chr	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8chr(const utf8_int8_t *src,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8cmp	vendor/utf8.h	/^utf8_constexpr14_impl int utf8cmp(const utf8_int8_t *src1,$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8codepoint	vendor/utf8.h	/^utf8codepoint(const utf8_int8_t *utf8_restrict str,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8codepointcalcsize	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8codepointcalcsize(const utf8_int8_t *str) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8codepointsize	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8codepointsize(utf8_int32_t chr) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8cpy	vendor/utf8.h	/^utf8_int8_t *utf8cpy(utf8_int8_t *utf8_restrict dst,$/;"	f	typeref:typename:utf8_int8_t *
utf8cspn	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8cspn(const utf8_int8_t *src,$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8dup	vendor/utf8.h	/^utf8_int8_t *utf8dup(const utf8_int8_t *src) {$/;"	f	typeref:typename:utf8_int8_t *
utf8dup_ex	vendor/utf8.h	/^utf8_int8_t *utf8dup_ex(const utf8_int8_t *src,$/;"	f	typeref:typename:utf8_int8_t *
utf8islower	vendor/utf8.h	/^utf8_constexpr14_impl int utf8islower(utf8_int32_t chr) {$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8isupper	vendor/utf8.h	/^utf8_constexpr14_impl int utf8isupper(utf8_int32_t chr) {$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8len	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8len(const utf8_int8_t *str) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8lwr	vendor/utf8.h	/^void utf8lwr(utf8_int8_t *utf8_restrict str) {$/;"	f	typeref:typename:void
utf8lwrcodepoint	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int32_t utf8lwrcodepoint(utf8_int32_t cp) {$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int32_t
utf8makevalid	vendor/utf8.h	/^int utf8makevalid(utf8_int8_t *str, const utf8_int32_t replacement) {$/;"	f	typeref:typename:int
utf8ncasecmp	vendor/utf8.h	/^utf8_constexpr14_impl int utf8ncasecmp(const utf8_int8_t *src1,$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8ncat	vendor/utf8.h	/^utf8_int8_t *utf8ncat(utf8_int8_t *utf8_restrict dst,$/;"	f	typeref:typename:utf8_int8_t *
utf8ncmp	vendor/utf8.h	/^utf8_constexpr14_impl int utf8ncmp(const utf8_int8_t *src1,$/;"	f	typeref:typename:utf8_constexpr14_impl int
utf8ncpy	vendor/utf8.h	/^utf8_int8_t *utf8ncpy(utf8_int8_t *utf8_restrict dst,$/;"	f	typeref:typename:utf8_int8_t *
utf8ndup	vendor/utf8.h	/^utf8_int8_t *utf8ndup(const utf8_int8_t *src, size_t n) {$/;"	f	typeref:typename:utf8_int8_t *
utf8ndup_ex	vendor/utf8.h	/^utf8_int8_t *utf8ndup_ex(const utf8_int8_t *src, size_t n,$/;"	f	typeref:typename:utf8_int8_t *
utf8nlen	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8nlen(const utf8_int8_t *str, size_t n) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8nsize_lazy	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8nsize_lazy(const utf8_int8_t *str, size_t n) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8nvalid	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8nvalid(const utf8_int8_t *str,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8pbrk	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8pbrk(const utf8_int8_t *str,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8rchr	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8rchr(const utf8_int8_t *src, int chr) {$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8rcodepoint	vendor/utf8.h	/^utf8rcodepoint(const utf8_int8_t *utf8_restrict str,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8size	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8size(const utf8_int8_t *str) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8size_lazy	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8size_lazy(const utf8_int8_t *str) {$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8spn	vendor/utf8.h	/^utf8_constexpr14_impl size_t utf8spn(const utf8_int8_t *src,$/;"	f	typeref:typename:utf8_constexpr14_impl size_t
utf8str	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8str(const utf8_int8_t *haystack,$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
utf8upr	vendor/utf8.h	/^void utf8upr(utf8_int8_t *utf8_restrict str) {$/;"	f	typeref:typename:void
utf8uprcodepoint	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int32_t utf8uprcodepoint(utf8_int32_t cp) {$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int32_t
utf8valid	vendor/utf8.h	/^utf8_constexpr14_impl utf8_int8_t *utf8valid(const utf8_int8_t *str) {$/;"	f	typeref:typename:utf8_constexpr14_impl utf8_int8_t *
